import pytest

from day04 import search_matrix, search_matrix_for_x


@pytest.mark.parametrize(
    "input,expected",
    [
        (
            [
                [".", ".", "X", ".", ".", "."],
                [".", "S", "A", "M", "X", "."],
                [".", "A", ".", ".", "A", "."],
                ["X", "M", "A", "S", ".", "S"],
                [".", "X", ".", ".", ".", "."],
            ],
            4,
        ),
        (
            [
                [".", ".", "X", "M", "A", "S"],
            ],
            1,
        ),
        (
            [
                ["X"],
                ["M"],
                ["A"],
                ["S"],
            ],
            1,
        ),
        (
            [
                ["X", ".", ".", ".", ".", "."],
                ["X", "M", ".", ".", ".", "."],
                ["M", ".", "A", ".", ".", "."],
                ["A", ".", ".", "S", ".", "."],
                ["S", ".", ".", ".", ".", "."],
            ],
            2,
        ),
        (
            [
                ["X", ".", ".", ".", ".", "."],
                ["X", "M", ".", ".", ".", "."],
                ["M", ".", "A", ".", ".", "."],
                ["A", ".", ".", "S", ".", "."],
                ["S", "A", "M", "X", ".", "."],
            ],
            3,
        ),
        (
            [
                ["X", ".", ".", ".", ".", "."],
                ["X", "M", ".", ".", "X", "."],
                ["M", ".", "A", ".", "M", "."],
                ["A", ".", ".", "S", "A", "."],
                ["S", "A", "M", "X", "S", "."],
            ],
            4,
        ),
        (
            [
                ["X", ".", ".", ".", ".", "."],
                ["X", "M", "A", "S", "X", "."],
                ["M", ".", "A", ".", "M", "."],
                ["A", ".", ".", "S", "A", "."],
                ["S", "A", "M", "X", "S", "."],
            ],
            5,
        ),
        (
            [
                ["X", ".", ".", ".", ".", "."],
                ["X", "M", "A", "S", "X", "."],
                ["M", ".", "A", ".", "M", "."],
                ["A", ".", ".", "S", "A", "."],
                ["S", "A", "M", "X", "S", "."],
            ],
            5,
        ),
        (
            [
                ["M", "M", "M", "S", "X", "X", "M", "A", "S", "M"],
                ["M", "S", "A", "M", "X", "M", "S", "M", "S", "A"],
                ["A", "M", "X", "S", "X", "M", "A", "A", "M", "M"],
                ["M", "S", "A", "M", "A", "S", "M", "S", "M", "X"],
                ["X", "M", "A", "S", "A", "M", "X", "A", "M", "M"],
                ["X", "X", "A", "M", "M", "X", "X", "A", "M", "A"],
                ["S", "M", "S", "M", "S", "A", "S", "X", "S", "S"],
                ["S", "A", "X", "A", "M", "A", "S", "A", "A", "A"],
                ["M", "A", "M", "M", "M", "X", "M", "M", "M", "M"],
                ["M", "X", "M", "X", "A", "X", "M", "A", "S", "X"],
            ],
            18,
        ),
        (
            [
                [".", ".", ".", ".", "X", "X", "M", "A", "S", "."],
                [".", "S", "A", "M", "X", "M", "S", ".", ".", "."],
                [".", ".", ".", "S", ".", ".", "A", ".", ".", "."],
                [".", ".", "A", ".", "A", ".", "M", "S", ".", "X"],
                ["X", "M", "A", "S", "A", "M", "X", ".", "M", "M"],
                ["X", ".", ".", ".", ".", ".", "X", "A", ".", "A"],
                ["S", ".", "S", ".", "S", ".", "S", ".", "S", "S"],
                [".", "A", ".", "A", ".", "A", ".", "A", ".", "A"],
                [".", ".", "M", ".", "M", ".", "M", ".", "M", "M"],
                [".", "X", ".", "X", ".", "X", "M", "A", "S", "X"],
            ],
            18,
        ),
    ],
)
def test_search_matrix(input, expected):
    results = search_matrix(input, "XMAS")

    assert len(results) == expected


@pytest.mark.parametrize(
    "input,expected",
    [
        (
            [
                ["M", ".", "M"],
                [".", "A", "."],
                ["S", ".", "S"],
            ],
            1,
        ),
        (
            [
                ["M", ".", "S"],
                [".", "A", "."],
                ["M", ".", "S"],
            ],
            1,
        ),
        (
            [
                ["S", ".", "S"],
                [".", "A", "."],
                ["M", ".", "M"],
            ],
            1,
        ),
        (
            [
                ["S", ".", "M"],
                [".", "A", "."],
                ["S", ".", "M"],
            ],
            1,
        ),
        (
            [
                ["S", ".", "S"],
                [".", "A", "."],
                ["S", ".", "M"],
            ],
            0,
        ),
        (
            [
                [".", "M", ".", "S", ".", ".", ".", ".", ".", "."],
                [".", ".", "A", ".", ".", "M", "S", "M", "S", "."],
                [".", "M", ".", "S", ".", "M", "A", "A", ".", "."],
                [".", ".", "A", ".", "A", "S", "M", "S", "M", "."],
                [".", "M", ".", "S", ".", "M", ".", ".", ".", "."],
                [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
                ["S", ".", "S", ".", "S", ".", "S", ".", "S", "."],
                [".", "A", ".", "A", ".", "A", ".", "A", ".", "."],
                ["M", ".", "M", ".", "M", ".", "M", ".", "M", "."],
                [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ],
            9,
        ),
    ],
)
def test_search_matrix_for_x(input, expected):
    results = search_matrix_for_x(input, "MAS")

    assert len(results) == expected
